#!/bin/bash
#
# Copyright (C) 2015 Jérôme Gasperi <jerome.gasperi@gmail.com>
#
# This file is subject to the terms and conditions defined in
# file LICENSE, which is part of this source code package.
#

####### DO NOT TOUCH THIS ######
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'
################################

#
# Force script to exit on error
#
set -e
err_report() {
    echo -e "${RED}[ERROR] Error on line $1 ${NC}"
}
trap 'err_report $LINENO' ERR

#
# Help function
#
function showUsage {
    echo -e ""
    echo -e "Build and deploy rocket"
    echo -e ""
    echo -e "   Usage $0 <tag>"
    echo -e ""
    echo -e "   Where tag is dist or dev (default dist)"
    echo -e ""
    echo -e "   Options:"
    echo -e ""
    echo -e "      -h | --help show this help"
    echo -e ""
    echo -e "      !!! This script requires docker and docker compose !!!"
    echo -e ""
}

ROCKET_TARGET="dist"
while (( "$#" ));
do
	case "$1" in
        -h|--help)
            showUsage
            shift # past argument
            exit 0
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            showUsage
            echo -e "${RED}[ERROR] Unsupported flag $1${NC}"
            echo -e ""
            exit 1
            ;;
        *) # preserve positional arguments
            ROCKET_TARGET="$1"
            shift
            ;;
	esac
done

if ! [ -x "$(command -v docker)" ]; then
    echo -e "${RED}[ERROR] Missing docker command${NC}"
    exit 1
fi

if [ "${ROCKET_TARGET}" = "dev" ]; then
    echo -e "[INFO] Compile rocket for ${GREEN}development${NC}"
else 
    echo -e "[INFO] Compile rocket for ${GREEN}production${NC}"
fi

echo -e "[INFO] Building code"
./buildCode ${ROCKET_TARGET}

echo -e "[INFO] Building docker image ${ROCKET_IMAGE_TAG}"
docker build -t jjrom/rocket:latest -f ./build/rocket/Dockerfile .

echo -e "[INFO] Docker image built - ${GREEN}jjrom/rocket:${ROCKET_IMAGE_TAG}${NC}"
docker compose up -d
